{"1-percent-Better-Everyday":{"title":"1% Better Everyday","links":[],"tags":[],"content":"\nEffects of habits (good/bad) are only seen 5 to 10 years later.\n\nRepeating 1% errors leads to toxic results.\n\n\nSuccess is a product of daily habits, not once-in-a-lifetime transformations.\n\nYou get what you repeat.\n\n\n\n\nTime magnifies the margin between success and failure. It will multiply whatever you feed it. Good habits make time your ally. Bad habits make time your enemy.\n\n"},"Acceptance":{"title":"Acceptance","links":["Mindful-Awareness"],"tags":[],"content":"Acceptance means being open to your thoughts, feelings, and circumstances as they are. It doesn’t mean approving, wanting, liking, or giving in. It simply means letting go of trying to control when control isn’t working for you.\n\nAccepting reality rather than pushing it away helps us be more present and involved in our lives.\n\nTo accept reality, we can be more aware of the following -\n\nThoughts / Feelings\nPhysical Sensations\nActions\n\n\n\n                  \n                  Info\n                  \n                \nNaming your emotion helps with acceptance.\n\nThe first step towards acceptance is knowing when we are not accepting reality. This happens when we start thinking about how things should be different, in other words, we start thinking something is not fair.\nWhen you don’t accept reality, you generally end up frustrated or angry. Remember that anger is just a mask over another emotion.\n\n\n                  \n                  WARNING\n                  \n                \nThis will take time to learn!\n\nImproving Acceptance Skills\n\nCultivate compassion.\nThink of it from different perspectives.\nFocus on what can be changed.\nPractice Mindful Awareness.\nMake time for reflection/contemplation.\nDon’t avoid being who you are.\n\nReferences\n\nAcceptance\n"},"Algorithms-to-Live-By":{"title":"Algorithms to Live By","links":[],"tags":["BookNote"],"content":""},"Atomic-Habits":{"title":"Atomic Habits","links":["1-percent-Better-Everyday","Progress-Requires-Patience","Systems-Over-Goals","Three-Layers-of-Behavior-Change","Identity-Change","Habit-Loop","Habit-Stacking","Building-a-Second-Brain","Habit-Trackers","Big-Five-Personality-Traits","Getting-Things-Done","Guns-Germs-and-Steel"],"tags":["BookNote"],"content":"Introduction\n\nA habit is a routine that is performed regularly, and in some cases automatically.\nA small change tends to compound over the years into remarkable results.\n\nThe Surprising Power Of Atomic Habits\n\nAggregation of marginal gains - tiny improvements that compound.\nHabits are the compound interest on self-improvement - 1% Better Everyday.\nProgress Requires Patience - all big things come from small beginnings.\nSystems Over Goals - Goals for Direction, Systems for Progress.\n\nYour Habits Shape Your Identity\n\nHow to change a habit - Three Layers of Behavior Change.\nBehind every system of actions is a system of beliefs.\nTrue behavior change is Identity Change.\n\nHow To Build Better Habits In 4 Simple Steps\n\nA habit is a behavior that has been repeated enough times to be automatic.\nHabit Loop - Cue, Craving, Response, Reward.\nAll behavior is driven by the desire to solve a problem.\n\nThe Man Who Didn’t Look Right\n\nYou don’t have to be aware of a cue for a habit to begin.\nStart the process of behavior change with awareness.\nPointing &amp; Calling - making a non-conscious habit conscious.\n\nThe Best Way To Start A Habit\n\nThe two most common cues are time and location.\nImplementation Intentions inform when and where we partake in a habit.\n\nThey allow us to say no to distractions by giving more clarity.\n\n\nHabit Stacking - A manifestation of the 1st law of behavior change - Make It Obvious.\n\nMotivation is Overrated; Environment Often Matters More\n\nPeople choose products based on where they are, and not what they are.\nEnvironment shapes human behavior - behavior = f(person, environment)\nTo start a habit, make the cue a big part of your environment.\nA stable and predictable environment leads to stable and predictable habits.\n\nThe Secret To Self-Control\n\nAddictions can dissolve with a radical change in environment.\nDiscipline should not require heroic willpower and self-control.\nBad habits are autocatalytic - they feed themselves.\nTo stop a bad habit, cut it at the source.\n\nHow To Make Habits Irresistible\n\nOpportunities of the future are more attractive than those of today.\nDopamine Spike - Habits are dopamine-driven feedback loops.\nAnticipation of a reward can often feel better than attainment.\nTemptation bundling is a way to apply Premack’s Principle.\nPremack’s Principle - More probable behaviors, reinforce less probable ones.\n\nThe Role Of Family And Friends In Shaping Your Habits\n\nWe imitate the behaviors of three groups -\n\nThe Close.\nThe Many.\nThe Powerful.\n\n\nTo make habits more attractive, join a group where the habit is normal.\n\nBelonging to a tribe sustains motivation.\nThere is wisdom in numbers.\n\n\n\nHow To Find And Fix The Causes Of Your Bad Habits\n\nA craving is the manifestation of the underlying motive.\nHabits are modern-day solutions to ancient desires.\nDesire is the difference between where you are now vs where you want to be.\nReframe habits, highlighting their benefits rather than their drawbacks.\n\nWalk Slowly, But Never Backward\n\nGet your reps in - Preparation cannot become Procrastination.\nHebb’s Law: Neurons that fire together wire together.\nRepetition is a form of change - habits form based on frequency and not time.\n\nThe Law Of Least Effort\n\nLaw of Least Effort - We do what is easy and convenient.\nThe less energy a habit requires, the more likely it is to occur.\nHabits are easier to build if they fit into the flow of your life.\n\nHow To Stop Procrastinating By Using The Two-Minute Rule\n\nIt is easy to continue what you are already doing as opposed to changing.\nA new habit should take less than 2 minutes to do.\n\nThis works as it is easier to continue doing the right thing once started.\nThus, the initiation of any new habit should be less than 2 minutes long.\nIn other words, the gateway habit should be simple and easy.\n\n\nMaster the art of showing up - standardize before you optimize.\nMake it easy to start, and the rest will follow.\n\nHow To Make Good Habits Inevitable And Bad Habits Impossible\n\nCommitment Devices - A choice made in the present to control future actions.\nUse technology to automate your life so you can focus on what technology can’t do.\nThe ultimate way to lock in future behaviors is to automate your habits.\nAlso refer Building a Second Brain - Stigmergy Effect.\n\nThe Cardinal Rule Of Behavior Change\n\nWe are more likely to repeat a behavior when the experience is satisfying.\nWhat is immediately rewarded is repeated. What is immediately punished is avoided.\nHyperbolic Discounting - We value the present more than the future.\nThe costs of your good habits are in the present, and those of your bad ones are in the future.\nIncentives start a habit, identity sustains it.\n\nHow To Stick to Good Habits Everyday\n\nUse Habit Trackers - Never Break The Chain.\n\nThis simultaneously makes a habit obvious, attractive, and satisfying.\n\n\nThe most effective form of motivation is progress.\nLog immediately after the habit occurs - positive reinforcement.\nThe breaking of the habit does not matter if the reclaiming of it is fast.\nJust make sure you show up, make it small, but show up.\n\nHow An Accountability Partner Can Change Everything\n\nPain is an effective teacher.\nConsequences should be local, tangible, concrete, and immediate.\nAn accountability partner can enable immediate cost to bad habits.\n\nThe Truth About Talent\n\nHabits stick when they are aligned with your natural inclinations and abilities.\nGenes do not determine your destiny, but your areas of opportunity.\nHabits are linked to our personality traits. Refer Big Five Personality Traits.\nWhen you can’t win by being better, win by being different.\n\nFurther Reading Mentioned\n\nGetting Things Done\nGuns Germs and Steel\n"},"Big-Five-Personality-Traits":{"title":"Big Five Personality Traits","links":["Atomic-Habits"],"tags":[],"content":"The big-five spectrums of personality traits are -\n\nOpenness to Experience - From curious and inventive on one end to cautious and consistent on the other.\nConscientiousness - Organized and efficient to easygoing and spontaneous.\nExtroversion - Outgoing and energetic to solitary and reserved.\nAgreeableness - Friendly and compassionate to challenging and detached.\nNeuroticism - Anxious and sensitive to confident, calm, and stable.\n\nHow similar is this to 16 Personalities? Btw, I am a Protagonist (ENFJ/T). This is another test result. This test is a recommendation from James Clear, the author of Atomic Habits. His recommendations for personality tests can be found here."},"Biking-Tips":{"title":"Biking Tips","links":["Bike-Maintenance"],"tags":[],"content":"\nHave a good rear light.\n\nIt needs to be able to handle all weather conditions.\nNeeds to have good battery life.\n\n\nLearn to handle the bike with one hand.\n\nAllows you to drink water.\nAllows you to point and indicate.\nEventually, learn to ride the bike with no hands.\n\n\nAvoid locking the upper body.\n\nShoulders, arms, and wrists should be relaxed.\nAdd image\n\n\nAlways corner with your outside foot down.\n\nThis reduces the chance of the wheel slipping on high-speed turns.\nAdd image\n\n\nTry eating something small every 30 minutes of the ride.\nLearn basic Bike Maintenance.\nDrafting - Biking behind someone is up to 30% easier than biking next to them.\n\nReferences\n\nyoutu.be/gUapMtJIb1s\n"},"Building-a-Second-Brain":{"title":"Building a Second Brain","links":["Second-Brain","Zettelkasten","Poverty-of-Attention","Common-Place-Book","CODE","Capture","Externalize-Your-Thoughts","Organize","PARA","Distill","Express","Hemmingway-Bridge","How-to-Take-Smart-Notes","Atomic-Habits","Getting-Things-Done","The-Bullet-Journal-Method"],"tags":["BookNote"],"content":"Introduction\n\nPersonal Knowledge Management (PKM) helps us harness what we know.\nSecond Brain - A digital archive of your knowledge. Similar to Zettelkasten.\n\nWhere It All Started\n\nWrite Things Down!!!\nHuman Capital is the knowledge embodied in humans.\n\nWhat Is A Second Brain\n\nPoverty of Attention is a result of instant access to information through the internet.\nHistorically, people noted things down in a Common Place Book.\n\nHow A Second Brain Works\n\nCreativity is the process of connecting seemingly unconnected ideas.\nThe three stages of PKM are - Remembering, Connecting, and Creating.\nCODE - Capture, Organize, Distill &amp; Express\n\nCapture - Keep What Resonates\n\nA knowledge asset is a crystallization of ideas that promises future value.\nIn any piece of content, value is not equally distributed.\nExternalize Your Thoughts to reap the rewards of writing things down.\n\nOrganize - Save For Actionability\n\nCathedral Effect - Our environment shapes our thinking.\nPARA - Projects, Areas, Resources, and Archives.\n\nDistill - Find the Essence\n\nDiscoverability is the best way to make notes helpful.\nWhile deciding what to keep, we also have to decide what not to.\nEvery bit of attention you invest should create value.\n\nExpress - Show Your Work\n\nAs a knowledge worker, attention/time is our most scarce resource.\nCreativity thrives on examples and templates.\n\nThe Art Of Creative Execution\n\nThe creative process is ancient and unchanging.\nA second brain allows standardization of work.\nHemmingway Bridge - Use yesterday’s momentum today.\n\nThe Essential Habits of Digital Organizers\n\nCreativity arises when we are organized and efficient.\nPeriodic reviews help maintain your working environment.\nAny system that needs to be perfect to be reliable is deeply flawed.\n\nThe Path To Self Expression\n\nView information through a lens of abundance - more is not always better.\nAn idea wants to be shared. Knowledge gets more valuable as it multiplies.\n\nFurther Reading Mentioned\n\nHow to Take Smart Notes\nAtomic Habits\nGetting Things Done\nThe Bullet Journal Method\n"},"C++-Tips":{"title":"C++ Tips","links":[],"tags":[],"content":""},"CODE":{"title":"CODE","links":["Capture","Organize","Distill","Express"],"tags":[],"content":"Capture\n\nWe are generally inundated with information.\nNeed to make a habit of finding what’s worthy in the cacophony.\n\nOrganize\n\nAvoid organizing methods that are overly rigid and prescriptive.\nOrganize for action - according to your active projects.\n\nDistill\n\nEvery note is a seed of an idea, and every idea has an essence.\nDistilling notes helps to find said essence.\n\nExpress\n\nInformation turns into knowledge only when you apply it.\n\n"},"Capture":{"title":"Capture","links":["Externalize-Your-Thoughts"],"tags":[],"content":"\nInformation is food for the brain. It is the very basis of our survival.\nWe are what we consume - information and food.\nCreativity requires a creative process.\n\n\nTalent needs to be channeled and developed to become something more than a momentary spark.\n\nWhat Not To Keep\n\nKeep sensitive information out of your notes.\nIf a special format is better handled by a dedicated app.\nVery large files.\nNotes that need to be collaboratively edited.\n\nTwelve Favorite Problems\n\nWhat do I want to do in my career?\nHow do I improve and maintain my physical and mental health?\nHow to get a reliable secondary source of income?\nWhat do I do with the money I earn?\nHow do I develop better habits?\nHow do I eat better food? Rather, how to stop eating junk food?\nHow do I go about trying to get into a relationship?\nHow do I become less emotional and more stoic?\nWhat do I have to know to be future-proof in my career?\nWhat do I need to do to become an expert in some field, so that I remain valuable?\nHow to develop newer hobbies?\n\n\nEmotions organize - rather than disrupt - rational thinking.\n\nRefer Externalize Your Thoughts."},"Career-Development":{"title":"Career Development","links":["Project-Manage-your-Career"],"tags":[],"content":"First Principles\n\nYou are responsible for your career development - so own it!\nBe patient with your career - there is no need to rush it!\nFocus on a few development areas at a time.\nTake risks - don’t be afraid to try something new.\nAcquire a rich portfolio of skills, knowledge, and experiences.\nMake yourself visible both internally and externally.\n\nLook into how to Project Manage your Career!"},"Career":{"title":"Career","links":["You-And-Your-Research","Career-Development","Project-Manage-your-Career"],"tags":[],"content":"\nYou And Your Research\nCareer Development\nProject Manage your Career\n"},"Cargo":{"title":"Cargo","links":[],"tags":[],"content":"\nCargo is Rust’s build system and package manager.\nCargo handles the following -\n\nBuilding code.\nDownloading libraries.\nBuild libraries/dependencies.\n\n\nYou can use Cargo to create packages. Doing so does the following -\n\nCargo.toml file - Cargo configuration file.\nsrc directory - contains main.rs.\nInitializes a git repository with a .gitignore file.\n\n\nPackages of code are called crates.\nBuilding a Cargo project gives a Cargo.lock file.\n\nThis is important for reproducible builds.\nSets the versions on the initial cargo build run.\nVersions are not changed until an explicit update is called.\n\n\n\nCargo Commands\n\nCreate a new project - cargo new\nBuild - cargo build\n\nBy default, build an executable with debug info.\nUse cargo build --release for optimized binary.\nNote, this would increase compile time.\n\n\nRun - cargo run\nCompilation check - cargo check\nUpdate crate - cargo update\nFormat code - cargo fmt\n"},"Certified-Deposits":{"title":"Certified Deposits","links":[],"tags":[],"content":"\nA CD is a savings-type account that earns a fixed interest for a fixed period.\nThe principal in a CD should remain untouched for the period of the CD.\n\nAny withdrawal of money will lead to a penalty.\n\n\nCDs offer fixed, safe, and generally federally insured (up to 250,000).\nCDs don’t offer the growth potential of equity or debt investments.\nCD interest taxes are not on maturity, but when the bank gives you the interest.\nCheck early withdrawal penalty (EWP) and make sure it does not touch your principal.\n\n\n\n                  \n                  Warning\n                  \n                \nMissing the bank’s deadline for instructing it on how to handle the proceeds of your maturing CD can lead to involuntarily locking yourself into a subpar rate for years to come, or incurring an unwanted—and potentially hefty—early withdrawal penalty because you waited too long before extracting your funds.\n\nOpening a CD will lock you in -\n\nInterest Rate\nTerm (ends on maturity date - date on which money can be withdrawn from CD without penalty)\nPrincipal\nInstitution\n\n\n\n                  \n                  Important\n                  \n                \nWhen choosing the CD term, pay attention to the Fed’s rate-setting movements and plans. Opening a long-term CD right before a Fed rate hike can hurt your future earnings, while expectations of decreasing rates can signal a good time to lock in a long-term rate.\n\nReferences\n\nInvestopedia/CD\n"},"Classes":{"title":"Classes","links":[],"tags":[],"content":"\nClasses = Data Members + Member Functions\nAn object is an instantiation of the class.\nMembers of a class a guarded by access specifiers -\n\nprivate - only accessible to members of the same class or friends (default).\nprotected- accessible from derived classes.\npublic - accessible anywhere the object is visible.\n\n\nMember functions can be explicitly made inline by writing the body inside the class.\n\nWe generally inline functions that are very simple, for example, getters and setters.\n\n\n\nConstructors\n\nConstructors are used to initialize data members of a class.\nThese special functions have the same name as the class.\nConstructors don’t have return types, not even void.\nConstructors are only executed when an object is created.\nConstructors can be overloaded.\nDefault constructors take no arguments.\n\nReferences\n\nClasses\nTemplates\n"},"Common-Place-Book":{"title":"Common Place Book","links":["Second-Brain"],"tags":[],"content":"\nIt was popularized in the Industrial Revolution.\nModern readers tend to follow a book from start to finish.\nEarlier, people used to jump from book to book a lot.\nThey used to transcribe what they read into notebooks.\nReading and writing went hand in hand.\n\n\nInstead of consuming ever-greater amounts of content, we could take on a more patient, thoughtful approach that favors rereading, reformulating, and working through the implications of ideas over time.\n\nA digital equivalent of a commonplace book is a Second Brain."},"Common-Programming-Concepts":{"title":"Common Programming Concepts","links":[],"tags":[],"content":"Variables and Mutability\n\nBy default, Rust variables are immutable. This makes the programmer explicitly state the mutable nature of a variable if required.\n\n\nThe mut keyword can be used to make a variable mutable.\nVariables are different from constants in Rust -\n\nConstants can never be mutable.\nConstants are declared using the const keyword instead of let.\nConstants should always have their type annotated.\nConstants can be declared in any scope.\nConstants can only be assigned constant expressions.\n\n\n\nShadowing\nShadowing is not the same as creating a mutable variable. We can only shadow by re-declaring the variable using the keyword let.  Shadowing allows us to carry out multiple transformations on a variable, after which it is still immutable.\n// At this point the variable x has value 1.\nlet x = 1;\n \n// At this point x is shdowing the earlier declaration.\n// The new value of x here is 2.\nlet x = x + 1;\n \n// The new value of x here is 4.\nlet x = 2 * x;\n \n{\n\t// The new value of x here is 12.\n\tlet x = 3 * x;\n}\n \n// The value of x within the above scope is 12.\n// But outside the scope of the inner block,\n// the value of x is still 4.\nprintln!(&quot;{}&quot;, x);\nOne of the major uses of shadowing is changing the type of a variable. Rust does not allow the user to change the type of a variable (even if it’s mutable). Rust also does not support the implicit type conversion of variables like C or C++. Instead Rust uses shadowing to force the user to explicitly change the type if they need to.\n// At this point spaces is of type string.\nlet spaces = &quot;This is a string!&quot;;\n \n// Now spaces is type integer.\nlet spaces = spaces.len();\nData Types\nRust data types are of two types -\n\nScalar - represents a single value (Integer, floating point, boolean, and characters).\nCompound - can group multiple variables into one type (arrays and tuples).\n\nTuples\n\nGeneral way of grouping types together.\nHave fixed length that can’t be changed.\nTuples can have variables of different types.\nTuples are zero indexed.\nA tuple without any value is called a unit - ().\n\nlet tup: (bool, char, u32, f64) = (true, &#039;a&#039;, 18, 4.2);\n \n// This called destructing the tuple.\n// Similary to structured bindings in C++.\nlet (a, b, c, d) = tup;\n \n// Individual tuple elements can be accessed with indices.\nlet a : bool = tup.0;\nlet b : char = tup.1;\nlet c : u32 = tup.2;\nlet d : f64 = tup.3;\nArrays\n\nArrays unlike tuples consist of elements of the same type.\nArrays are of fixed lengths. Use a vector from the standard library is a dynamic array is required.\nArrays are useful when you want data on the stack instead of the heap.\n\n// This array consists 5 elements of u32.\nlet arr : [u32; 5] = [1, 2, 3, 4, 5];\n \n// This is equivalent to [1, 1, 1, 1, 1]\nlet arr : [u32; 5] = [5; 1];\nFunctions\n\nFunctions are declared using the fn keyword.\nRust does not care where a function is defined as long as it’s within the scope.\nFunction signatures must declare the type of each parameter.\n\nStatements vs Expressions\n\nRust is an expression based language.\nStatements are instructions that perform some action and do not return a value.\nExpressions evaluate to a resultant value.\nExpressions generally don’t have semi-colons.\n\n// Here the instructions in the block evaluates to 4.\n// These instructions don&#039;t end with a semi-colon.\n// Making this block an expression instead of a statement.\n// Thus the value of y is cound to 4.\nlet y = {\n\tlet x = 3;\n\tx + 1\n}\nControl Flow\n\nRust has all the regular control flow constructs like if, for and while.\nThe if and loop expression can be used with the let keyword to assign values to variables.\n\n// Here the if statments acts like the ternary operator in C/C++.\n// \n// Note that the expressions in both arms should return the same type.\n// This allows the compiler to understand the type at compile time,\n// allowing the compiler to make sure the variable is valid everywhere.\nlet var = if condition {5} else {2};\n \nlet mut counter = 0;\n \n// Here the value of result is set to 20.\n// The expression after the break keyword is the value of the loop.\nlet result = loop {\n\tcounter += 1;\n\tif counter == 10 {\n\t\tbreak 2 * counter;\n\t}\n}"},"Computer-Science":{"title":"Computer Science","links":["Distributed-Systems","ML-Systems","Programming-in-C++","Programming-in-Rust","Publishing-Your-Vault-Online"],"tags":[],"content":"\nDistributed Systems\nML Systems\nProgramming in C++\nProgramming in Rust\nPublishing Your Vault Online\n"},"Computer-Systems-Courses":{"title":"Computer Systems Courses","links":["Distributed-Systems","ML-Systems","Programming-in-C++","Programming-in-Rust"],"tags":[],"content":"\nOperating Systems\nComputer Networks\nBig Data Systems\nDistributed Systems\n\nMIT OCW\nMartin Kleppmann\n\n\nML Systems\n\nCornell Course\nStanford MLSys Seminar\nDesigning Machine Learning Systems - Book by Chip Hyuen\n\n\nLanguages\n\nProgramming in C++\nProgramming in Rust\n\n\n"},"DS-and-Algorithms-Tips":{"title":"DS and Algo Tips","links":[],"tags":[],"content":"STL\n\nWhen comparing C++ qsort vs STL sort, STL sort runs a lot faster than qsort as it is not optimized for one type of data structure - www.geeksforgeeks.org/c-qsort-vs-c-sort/.\n\nArrays\n\nAlways look for edge cases, specifically if the array is empty or smaller than the required length.\nWhen dealing with strings, check if the characters are lowercase, uppercase, alphanumeric etc.\n\nMin Heap\n\nGeneral structure of using priority queues to implement heaps. The following code block shows the implementation of a min heap -\n\nstruct compare {\n\tbool operator() (Object a, Object b) {\n\t\treturn a.value() &lt; b.value();\n\t}\n};\n \npriority_queue&lt;Object obj, vector&lt;Object&gt;, compare&gt; pq();"},"Derived-Types":{"title":"Derived Types","links":[],"tags":[],"content":"Arrays\n\nContinuous collections of items of a singular type.\n\nPointers\n\nStore addresses of other variables.\nThe memory location of a variable is decided at run time.\nPointer size is architecture-dependent.\n\nReferences\n\nThese act as aliases to variables.\nThey must always be initialized and never be null.\n\nFunctions\n\nA series of statements grouped together.\nFunction’s type = Return Type + {Type of Parameters}\n\nint add(int a, int b);  // Funtion Type - int(int, int)\n \n// There is a difference in function types when they belong to a class.\n// Member functions take an implicit `this` parameter.\nclass Divide{ \n\tint subtract(int a, int b);  // Function Type - int (Divide*)(int, int)\n\tstatic float divide(int a, int b);  // Function Type - float(int, int)\n}\n\nPointers to functions can be passed to other functions.\n\nint multiply(int (*)(int, int));\n \nmultiply(&amp;add);\nUser-Defined Types\n\nEnums\nEnum Classes\nStructs\nClasses\nUnions\n\n\n\n                  \n                  Enum Classes \n                  \n                \nEnum classes are scoped, as opposed to unscoped enums. Enum classes prohibit, direct comparison with integers.\n"},"Designing-Data-Intensive-Applications":{"title":"Designing Data-Intensive Applications","links":["Reliability","Scalability","Maintainability"],"tags":["BookNote"],"content":"Software architectures are constructed using a variety of tools, each with its strengths and weaknesses. But, underlying these new frameworks and tools are three fundamental concepts that all computer systems must observe -\n\nReliability - Ability of a system to work correctly even when things go wrong.\nScalability - Ability of a system to handle increased loads.\nMaintainability - Ability of a system to be simple, operable, and evolvable.\n\nData Models\nData models form an important layer of software architecture, as they have a profound impact on system design. The goal of data models is to abstract the internal representation of the data. The most commonly used data model is the relational database.\n\nData is organized into tables (relations) and columns in relational databases.\n\nRecently, there has been a proliferation of NoSQL databases (databases that don’t follow the relational paradigm). NoSQL databases hope to solve the following problems -\n\nImprove write throughputs.\nOpen source data solutions.\nProvide a more dynamic and expressive data representation.\n"},"Distill":{"title":"Distill","links":[],"tags":[],"content":"\n\n                  \n                  Lao Tzu (Chinese Philosopher) \n                  \n                \nTo attain knowledge, add things every day.\nTo attain wisdom, remove things every day.\n\n\nDistillation is the very heart of effective communication.\nUse progressive summarization to convert a large block of text to its basic idea.\n\nProgressive Summarization\n\nTakes advantage of highlighting.\nThe main idea is recursive highlighting.\nThis is not done on note creation, but rather on successive note consumptions.\nThere are four layers -\n\nCaptured Notes - Original Notes.\nBolded Passages - The Most important part of the original notes.\nHighlighted Passages - Highlight important parts of the bolded passages.\nExecutive Summary -  Only needed when the note is visited frequently.\n\n\n\n\n\n                  \n                  Tip\n                  \n                \nMake all notes in bullet points when actively reading/consuming. Make sure each of these points is a maximum of one line long.\n\nPicasso’s Bull - 11 lithographs Picasso created while deconstructing a Bull.\n"},"Distributed-Systems":{"title":"Distributed Systems","links":["Designing-Data-Intensive-Applications","Infrastructure","MapReduce","Threads"],"tags":[],"content":"\nDistributed systems are a set of cooperating computers that are communicating with each other over a network to get some task done.\n\nI am currently reading the book Designing Data-Intensive Applications by Martin Kleppmann. I am also watching relevant lectures from  -\n\nMIT OCW - MIT 6.824\nMartin Kleppmann\n\nSome interesting topics to explore -\n\nInfrastructure\nMapReduce\nThreads\n"},"Exchange-Traded-Funds":{"title":"Exchange Traded Funds","links":["Mutual-Funds","S-and-P-500"],"tags":[],"content":"\nAn ETF tracks multiple stocks or securities.\nCan be used to track an index (eg, S&amp;P 500).\nThey may track different industries, sectors, or types of companies.\nETFs carry the risk of the underlying securities being held.\n\nETFs vs Mutual Funds\n\nBoth give investors a mechanism to diversify.\nETFs can be traded at any time of day, while Mutual Funds can be traded once a day.\nETFs are cheaper as mutual funds are managed by fund managers (require a fee?).\n\nCommon ETFs\n\nS&amp;P 500\nDOW\nNASDAQ\n\nReferences\n\nETF\n"},"Express":{"title":"Express","links":[],"tags":[],"content":"\nThe concept of sharing what you know, and not waiting for perfection.\nExpress ideas more frequently and in smaller chunks.\nThe most important part of sharing your work is getting feedback from others.\nThis feedback can be part of your notes, and add a different flavor.\n\nSearchability\nThere are generally four main modes of information retrieval -\n\nSearch\nBrowsing\nTags\nSerendipity\n"},"Externalize-Your-Thoughts":{"title":"Externalize Your Thoughts","links":["Building-a-Second-Brain","Note-Taking","Journaling"],"tags":[],"content":"While reading Chapter 4 of Building a Second Brain, I came across the familiar concept of externalizing thoughts. The book states that Note Taking is the simplest and most effective way to externalize one’s thoughts.\nBenefits Of Writing Things Down\n\nGeneration Effect - You are more likely to remember concepts you write down in your own words.\nJournaling - Writing about your feelings can improve your mental health.\nReactivity Loop - You get to take a breath before taking action based on the idea.\nDetachment Gain - Writing produces new knowledge that can be associated with past or future ideas.\n\n\nTranslating emotional events into words leads to profound social, psychological, and neural changes.\n"},"Finance":{"title":"Finance","links":["The-Three-Fund-Portfolio","Certified-Deposits","Investing-in-Bitcoin","The-Elements-of-Investing","The-Little-Book-of-Common-Sense-Investing","The-Psychology-of-Money"],"tags":[],"content":"\nThe Three-Fund Portfolio\nCertified Deposits\nInvesting in Bitcoin\nThe Elements of Investing\nThe Little Book of Common Sense Investing\nThe Psychology of Money\n"},"First-Rust-Program":{"title":"First Rust Program","links":["LLVM","Cargo"],"tags":[],"content":"\nRust, like C/C++, is an ahead-of-time statically compiled language.\nThe Rust compiler uses LLVM on the backend.\n\nAnatomy of a Rust Program\n// By default, Rust brings in items defined in the Standard Library.\n// This is called the prelude.\n//\n// Anything not in the prelude can be brought in through the `use` statement.\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n \n// The fn keyword is used to specify a Rust function.\n//\n// The `main` function is special. It is similar to the C/C++ main function.\n// It is the first piece of code that runs in every executable Rust program.\nfn main() {\n \n\t// The `!` after println indicates a Rust macro and not a function.\n\t// This is done because Rust functions do not take a variable number of\n\t// function arguments. Thus, using a macro for printing circumvents that,\n\t// as prints generally have a variable number of arguments.\n\tprintln!(&quot;Guess the number!&quot;);\n \n\t// The `let` statement is used to create variables.\n\t// Rust variables are statically typed.\n\tlet secret_number = rand::thread_rng().gen_range(1..=100);\n \n\tloop {\n\t\tprintln!(&quot;Please input your guess!&quot;);\n \n\t\t// In Rust, variables are immutable by default.\n\t\t// The `mut` keyword specifies that the variable is mutable.\n\t\tlet mut guess = String::new();\n\t\n\t\t// The `&amp;` indicates a reference.\n\t\t// References are immutable by default.\n\t\t// The `mut` keyword makes it a mutable reference.\n\t\t//\n\t\t// The read_line function returns a `Result` value, encoding the error\n\t\t// This is an `enum`. Each state of an `enum` is a `variant`.\n\t\t// An instance of `Result` has an `expect` method.\n\t\tio::stdin()\n\t\t\t.read_line(&amp;mut guess)\n\t\t\t.expect(&quot;Failed to read line&quot;);\n\t\n\t\t// Here we employ shadowing. It allows us to reuse variable names.\n\t\t// Used frequently when converting variables from one type to another.\n\t\t// There is no implicit type conversion in Rust, and hence we use shadowing.\n\t\t//\n\t\t// The type specified after `:` tells the parse function what type to\n\t\t// convert the string into. The `:` is used for time annotating types.\n\t\t//\n\t\t// Here we use a match instead of an expect.\n\t\t// This helps us handle the error instead of crashing.\n\t\tlet guess: u32 = match guess.trim().parse() {\n\t\t\tOk(num) =&gt; num,\n\t\t\tErr(_) =&gt; continue,    // _ is a catch all value\n\t\t};\n\t\n\t\t// Here we compare `guess` and `secret_number`.\n\t\t// Returns a variant of the `Ordering` enum.\n\t\t// The `match` statement is a control statement on the variant returned.\n\t\tmatch guess.cmp(&amp;secret_number) {\n\t\t\tOrdering::Less =&gt; println!(&quot;Too Small&quot;);\n\t\t\tOrdering::Greater =&gt; println!(&quot;Too Big&quot;);\n\t\t\tOrdering::Equal =&gt; {\n\t\t\t\tprintln!(&quot;You Win!&quot;);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\nCrates\n\nA crate is a collection of Rust source files.\nThere are two types of crates -\n\nBinary crates\nLibrary crates\n\n\n\nWhen using new crates, add them to the Cargo.toml file along with the required version number. While building dependencies, Cargo build everything from the registry that the dependency needs.\nThe registry is where people from Rust ecosystem post their libraries."},"Four-Laws-of-Behavior-Change":{"title":"Four Laws of Behavior Change","links":[],"tags":[],"content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLawHow to Create a Good Habit1st Law (Cue)Make It Obvious.2nd Law (Craving)Make It Attractive3rd Law (Response)Make It Easy4th Law (Reward)Make It Satisfying\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLawHow to Break a Bad HabitInverse 1st Law (Cue)Make It Invisible.Inverse 2nd Law (Craving)Make It UnattractiveInverse 3rd Law (Response)Make It DifficultInverse 4th Law (Reward)Make It Unsatisfying"},"Fundamental-Types":{"title":"Fundamental Types","links":[],"tags":[],"content":"These are built-in types that the C++ compiler implicitly understands. Some of the built-in types are -\n\nBooleans\nCharacters\nIntegers\nSingle Precision Floats\nDouble Precision Floats\nVoid\n\n\n\n                  \n                  Void Variables \n                  \n                \nNo variable can be of type void; it is primarily used to indicate a function returning nothing. A void * can point to any variable, and needs to be cast to another type before being dereferenced.\n\nThese fundamental types can further be modified using type specifiers. These set the size and the values allowed to be stored in these types.\n\nshort\nlong\nunsigned\nsigned\n\n\n\n                  \n                  Integer Overflow \n                  \n                \nOverflow behavior is well defined for unsigned integers (equivalent to the modulo operator or wrap around), but that’s not the case for signed integers. Also, conversion from unsigned to signed integers is well defined. The reverse is true from C++20.\n"},"Gates-2024":{"title":"Gates 2024","links":["tags/MentalHealth","tags/Career/AI"],"tags":["MentalHealth","Career/AI"],"content":"MentalHealth\n\nMy friend, the late Hans Rosling, used to say that “things can be bad and getting better.” It’s a good reminder that progress is not only possible but is happening every day.\n\n\nWhen I was my kids’ age, I didn’t believe in vacations or weekends. But as I got older—and especially since I became a father—I realized there is more to life than work.\n\nAI\n\nIn a world with limited resources, you have to find ways to maximize impact. Innovation is the key to getting the most out of every dollar spent. And artificial intelligence is about to accelerate the rate of discoveries at a pace we’ve never seen before.\n\n\nThe work that will be done over the next year is setting the stage for a massive technology boom later this decade.\n\nAI and Health\n\nCan AI combat antibiotic resistance?\nCan AI bring personalized tutors to every student?\nCan AI help treat high-risk pregnancies?\nCan AI help people assess their risk for HIV?\nCould AI make medical information easier to access for every health worker?\n\nReferences\n\nGatesNotes\n"},"Generative-Agents":{"title":"Generative Agents","links":[],"tags":[],"content":"\nIt can be used in the games for NPCs.\nIt can be used for social sciences to simulate large-scale human interaction.\n\nReferences\n\nGenerative Agents\n"},"Getting-Things-Done":{"title":"Getting Things Done","links":[],"tags":["BookNote"],"content":""},"GitHub-Publisher":{"title":"GitHub Publisher","links":[],"tags":[],"content":"\nIt is an Obsidian plugin used for publishing notes to GitHub.\nNatively supports Dataview and Excalidraw.\nThe plugin pushes directly to GitHub.\nHowever, since I use obsidian-exporter, I publish them locally.\n\nReferences\n\nobsidian-publisher.netlify.app/Plugin\n"},"Google-Platforms-Rant":{"title":"Google Platforms Rant","links":[],"tags":["ToRead"],"content":"References\n\ngist.github.com/chitchcock/1281611\n"},"Guns-Germs-and-Steel":{"title":"Guns, Germs, and Steel","links":[],"tags":["BookNote"],"content":""},"Habit-Loop":{"title":"Habit Loop","links":["Habit-Loop","Four-Laws-of-Behavior-Change"],"tags":[],"content":"Self Link: Habit Loop\n\n\nWithout Cue, Craving, and Response, a habit won’t happen.\nWithout a Reward, a habit won’t repeat.\n\n\nThe first three laws of behavior change - make it obvious, make it attractive, make it easy - increase the odds that a behavior will be performed. The fourth law - make it satisfying - increases the odds that a behavior is repeated.\n\nBuilding or breaking habits requires understanding the relationship between the various components of the Habit Loop. One framework to do so is outlined in Four Laws of Behavior Change."},"Habit-Stacking":{"title":"Habit Stacking","links":[],"tags":[],"content":"\nHabit Stacking is a form of positive Diderot Effect to help with habit formation.\n\nYou often decide what to do next based on what you have finished doing.\n\n\nNo behavior happens in isolation, each is a cue for the next.\nThe best way to build habits is to stack a new habit onto current habits.\nAfter I [CURRENT HABIT], I will [NEW HABIT].\nUses the momentum of one advantage onto the next.\nSuccessful habit formation depends on the correct cues.\n\nImproved with highly specific and actionable cues.\n\n\n"},"Hemmingway-Bridge":{"title":"Hemmingway Bridge","links":["Hemmingway-Bridge"],"tags":[],"content":"Self Link: Hemmingway Bridge\n\nOnly end a work session when you know what comes next.\nThis builds a bridge to the next day.\nYou don’t start from scratch, but rather from a well-known starting point.\nIn other words, end with the beginning in mind.\n\nHemmingway Bridge Construction\n\nWrite down the current status.\nWrite down the first thing to do in the next work session.\nWrite down the nebulous ideas for the next session.\nSend your current day’s work and updates for review.\n"},"How-to-Take-Smart-Notes":{"title":"How to Take Smart Notes","links":[],"tags":["BookNote"],"content":""},"Identity-Change":{"title":"Identity Change","links":["Identity-Change","Things-I-want-to-Inculcate","Who-I-Am","Habit-Identity-Loop-Drawing"],"tags":[],"content":"Self Link: Identity Change\n\nHabits are how you embody your identity.\nEvery action you take is a vote on who you wish to be.\nChange who you are by changing what you do repeatedly.\nThe two steps to change your identity are -\n\nDecide the type of person you want to be.\nProve it to yourself with small wins.\n\n\n\n\nHabits matter because they help you become the person you want to be.\n\nIn Things I want to Inculcate, I lay down a bunch of different goals I want to achieve over the next two years. In Who I Am, I outline the type of person I want to be.\n→ Habit Identity Loop Drawing"},"Infrastructure":{"title":"Infrastructure","links":["ML-Systems"],"tags":[],"content":"Distributed systems are a means to provide infrastructure for scalable and reliable applications. The different types of distributed infrastructure that can be provided are -\n\nStorage\nNetworking (What I work on at Google)\nCompute\nML Systems (more recent, same as compute maybe?)\n\nA really well-designed distributed system would be able to hide the fact that the underlying infrastructure is distributed → Note this is very hard to achieve.\nInfrastructure in general needs to be -\n\nScalable\nAvailable\nRecoverable\nReplicated\nConsistent\n\n\n\n                  \n                  Strong vs Weak Consistency \n                  \n                \nStrong consistency ensures that a read always returns the value from the latest write. Weak consistency is more flexible and does not guarantee that the latest write will be returned on a read.\n"},"Journaling":{"title":"Journaling","links":["Habit-Stacking"],"tags":[],"content":"Why Journal?\n\nCan lead to physical and mental health well-being.\nLeads to productivity benefits and more focused behaviors.\nIt can be done anytime and anywhere.\n\n\n\n                  \n                   Habit Stacking.\n                  \n                \nThe best way to continue journaling is \n\nMorning Pages\nTechnique for journaling. First thing in the morning, write whatever comes to mind for 3 pages. This is usually for journaling in a physical notebook. You can adapt it to digital journaling.\nWhat to Journal About?\n\nAsk yourself how you are feeling right now.\nDon’t worry about any methodology.\n\nToo much structure leads to procrastination.\nDon’t worry about filling out a predefined set of prompts.\n\n\n\nReferences\n\nyoutu.be/JHKiDe8E4hY\nyoutu.be/E8vwGLMTx5I\n"},"LLVM":{"title":"LLVM","links":[],"tags":[],"content":"References"},"Library":{"title":"Library","links":["Library","Designing-Data-Intensive-Applications","Building-a-Second-Brain","Atomic-Habits","The-Psychology-of-Money","The-Little-Book-of-Common-Sense-Investing","The-Elements-of-Investing"],"tags":[],"content":"Self Link: Library\nReading\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFileAuthorGenreDesigning Data-Intensive ApplicationsMartin KleppmannTechnology\nFinished\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFileAuthorGenreBuilding a Second BrainTiago ForteNote TakingAtomic HabitsJames ClearHabit BuildingThe Psychology of MoneyMorgan HouselPersonal FinanceThe Little Book of Common Sense InvestingJohn C. BoglePersonal FinanceThe Elements of InvestingBurton G. Malkiel, Charles D. EllisPersonal Finance"},"Links-vs-Tags":{"title":"Links vs Tags","links":["Links-vs-Tags"],"tags":[],"content":"Self Link: Links vs Tags\nLinks\n\nUse topics, concepts, and research.\nEssentially used to store information.\nUseful for networking many notes and navigating ideas.\n\nTags\n\nMainly used for searchability.\nUse for categorization for a specific intent.\nUseful for grouping topics later down the road.\nIt should not be too general.\nYou will mostly use this in the daily note.\n\nReferences\n\nwww.youtube.com/watch\n"},"ML-Systems":{"title":"ML Systems","links":["ML-Systems","When-to-use-Machine-Learning"],"tags":[],"content":"Self Link: ML Systems\nThis note contains what I learned about machine learning systems. I used the following resources to study -\n\nCornell Course\nStanford MLSys Seminar\nDesigning Machine Learning Systems - Book by Chip Hyuen\n\nI started with the book by Chip Hyuen, and listened to the MLSys seminar from Stanford whenever I had time. Here is a list of topics to further explore -\n\nWhen to use Machine Learning?\n\n"},"Mac-Terminal-Upgrade":{"title":"Mac Terminal Upgrade","links":["Mac-Terminal-Upgrade"],"tags":[],"content":"Self Link: Mac Terminal Upgrade\nSource: youtu.be/CF1tMjvHDRA\nSource: youtu.be/27Fi2RcdBFQ\nStep 1 - Install Homebrew\n/bin/bash -c &quot;$(curl -fsSL raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\nStep 2 - Add Homebrew to path\necho &#039;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#039; &gt;&gt; /Users/arun/.zprofile\neval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;\nStep 3 - Install OhMyZsh\nsh -c &quot;$(curl -fsSL raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;\nStep 4 - Install PowerLevel10k\ngit clone github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\nNow open ~/.zshrc and set the default ZSH theme -\nZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;\n\nNow run the following command to apply changes to your terminal -\nsource ~/.zshrc\nNow you are free to configure PowerLevel10k. You can also run the following command to bring up the configuration -\np10k configure\nInstall Zsh Plugins\n\nzsh-autosuggestions\n\ngit clone github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\nzsh-syntax-highlight\n\ngit clone github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\nNow modify the plugins line in ~/.zshrc.\nplugins=(git zsh-autosuggestions zsh-syntax-highlighting web-search)\n\nNow run the following command to apply changes to your terminal -\nsource ~/.zshrc"},"Maintainability":{"title":"Maintainability","links":[],"tags":[],"content":"\nMaintainability of a system determines to what degree it is simple, operable, and evolvable.\n\nOperability\nSystems should be designed and built in a way that makes it easy for system operators to keep the service running. Good operability means making routine tasks easier, so more time can be freed up for high-priority tasks. This can be done as follows -\n\nBuild good monitoring to provide visibility into runtime behavior.\nHaving meaningful default behavior with the provision to override if necessary.\nProgramming self-healing behaviors (like retries) where applicable.\n\nSimplicity\nAs software systems get larger, they become more complex and difficult to understand. With an increase in complexity, there is an increase in the chance of bugs as the underlying assumptions of the environment have a greater chance of being overlooked.\nThe best way to remove complexity is through good abstractions. A good abstraction can hide away a lot of complex implementation behind a clean, ready-to-use interface. Abstractions also have the added advantage of code reusability.\nEvolvability\nEvolvability is the ease with which a system adapts to unprecedented future use cases and requirement changes. The evolvability of a system is closely linked to how simple it is and the quality of the abstractions it uses."},"MapReduce":{"title":"MapReduce","links":[],"tags":[],"content":"\nMapReduce is a distributed computing framework for processing large datasets.\nA map function processes a key/value input and outputs intermediate key/value pairs.\nA reduce function merges all intermediate values associated with the same intermediate key.\n\nProgramming Model\n\nThe user provides the Map and Reduce functions.\nThe MapReduce library groups all intermediate values associated with the same intermediate key.\nmap: (k1, v1) --&gt; list(k2, v2)\nreduce: (k2, list(v2)) -&gt; list(v2)\nThe input keys and values are in a different domain from the output keys and values.\nThe intermediate key/value pairs are in the same domain as the output keys and values.\n\nWord Counting With MapReduce\nThe below pseudo-code block shows how the MapReduce framework can be used to count the number of words in various documents.\n# The key is the doc_name.\n# The value is the doc_contents.\n# The intermediate result is (word, 1).\n# The map function is run on multiple documents.\n# We will get a large number of (word, 1) pairs.\nMap(String doc_name, String doc_contents):\n\tfor each word in doc_contents:\n\t\tEmitIntermediate(w, &quot;1&quot;)\n \n# At this point, the MapReduce framework will aggregate\n# all pairs with the same key. For example, the Reduce\n# will run on the following inputs - \n# (w1, [1, 1, ...]), (w2, [1, 1, ...]), (w3, [1, 1, ...])\n \n# The input is going to be (word, [1, 1, ... 1]).\n# The output will be count (number of times the word is seen).\nReduce(String word, Iterator counts):\n\treturn sum(counts)\n \n# The reduce function will run on every aggregate created\n# by the framework, and each run will produce a single number.\n# The sum of all the outputs of the reduce functions will give us\n# the total number of words in various documents.\nImplementation\n\nSTEP 1: The MapReduce library splits the input into M splits.\n\nOne of these pieces is called the Master, which assigns work to the other splits (Workers).\nThere are M map tasks and R reduce tasks. An idle worker executes either a map or a reduce task.\n\n\nSTEP 2: A map worker parses key-value pairs from the input and executes the map function.\n\nThe intermediate key value pairs are buffered and periodically written to disk.\nThe master can access the disk and send data to idle workers to execute the reduce function.\n\n\nSTEP 3: The reduced worker uses an RPC to retrieve data from the disk.\n\nThe worker sorts the intermediate key/value pairs to group all instances of the same key together. This is fed to the reduce function.\nThe output of the reduce functions is appended to the final output file.\n\n\nSTEP 4: There will be one output file per reduce task.\n\nTypically, these files are then sent through another MapReduce operation.\n\n\n\n\nReferences\n\nMapReduce Paper\n"},"Master-Small-Talk":{"title":"Master Small Talk","links":[],"tags":["ToRead"],"content":"References\n\nSource: Master Small Talk\n"},"Mindful-Awareness":{"title":"Mindful Awareness","links":["Mindful-Awareness"],"tags":[],"content":"Self Link: Mindful Awareness\n\nMindfulness is about living in the present. Doesn’t matter if you do it well. All that matters is that you are doing it.\n\n\nMost of the time, the current moment is alright.\n\nWe can make that moment horrible by thinking of the past or the future.\n\n\nCheck and notice how you feel throughout the day!\n\nObserving how emotions impact your body from a third person’s perspective.\n\n\n\nPrimary and Secondary Emotions\n\nPrimary Emotions - First reaction to an event.\n\nThey are temporary.\n\n\nSecondary Emotions - These are generally reactions to your secondary emotions.\nEmotions are not good or bad. They just are. It’s human to have negative emotions.\nThere is no right way to feel! Remembering how you feel is not under your control.\n\nYou can only control what you do when you experience these strong emotions\nThis is called Acceptance - helps stay in the present.\n\n\nObserve which emotions show up, and what reactionary emotions show up.\n\n3 Point Check\n\nWhat am I thinking?\nWhat am I feeling physically?\nWhat am I doing?\n"},"Mutual-Funds":{"title":"Mutual Funds","links":["Mutual-Funds"],"tags":[],"content":"Self Link: Mutual Funds\n\nMutual funds are a professionally managed portfolio of securities.\nFund decisions are made by professional fund managers.\nBecoming extremely popular for retirement accounts.\n\nReferences\n\nMutual Funds\n"},"Nexus":{"title":"Nexus","links":[],"tags":["BookNote"],"content":"\n\n                  \n                  We have named our species Homo Sapiens - the wise human. But power isn&#039;t wisdom, and after 100,000 years of discoveries, inventions, and conquests humanity has pushed itself into an existential crisis. \n                  \n                \n"},"Note-Taking-App":{"title":"Note Taking App","links":[],"tags":[],"content":"\nThere are 4 archetypes of users for taking notes -\n\nArchitect - Need a clear structure.\nGardener - More spontaneous.\nLibrarian - More of a collector/categorizer.\nStudent - Mixture of the above.\n\n\n\nI am more of an Architect, but I want to think more like a Gardener. Also, I like how cool Obsidian is, some of the benefits are -\n\nSuper secure, as everything is local.\nEasy to sync across Apple devices.\nThe community plugins are amazing.\nEverything is plain text, making it super fast.\nClosest to the one app to rule them all approach.\n\nPersonally, I would recommend either Notion or Obsidian -\n\nWhy Obsidian?\nWhy Notion?\n\nI did not go with Notion as I thought it was too complicated and had too many options, and I spent a lot of time just deciding which template I wanted.\n\nReferences\n\nHow to pick a notes app\n"},"Note-Taking":{"title":"Note Taking","links":["Zettelkasten","Second-Brain","Note-Taking-App"],"tags":[],"content":"Overview\nNote-taking provides a practical medium through which you can transform any new knowledge you gain into actionable insights.\nMethodology\nThere are generally two broad but similar families of thought regarding note-taking -\n\nZettelkasten - Age-old method.\nSecond Brain - A modern method, mostly focused on digital note taking.\n\nBi-Directional Linking\n\nIt is essentially the concept of linking notes together.\nIt allows you to create notes, keeping in mind how you want to stumble upon this note in the future.\n\nWe get introduced to note-taking in school before tests, where we used to note down information that would be covered in tests. We then never referenced these notes again. Knowledge in this case was disposable.\n\n\n                  \n                  Definition \n                  \n                \nA note is a knowledge-building block, a discrete unit of information.\n\nRefer Note Taking App."},"Organize":{"title":"Organize","links":["Organize","PARA"],"tags":[],"content":"Self Link: Organize\n\nWe don’t need sophisticated systems to produce sophisticated works.\nOrganizing by projects leads to immediate actionability.\n\nPARA\n\nOrganizes information based on how actionable it is.\nAllows a consistent organizing system across media.\nPARA isn’t a filing system, but a production system.\n\n\nIt is only the steady completion of tangible wins that can infuse you with a sense of determination, momentum, and accomplishment.\n"},"Ownership":{"title":"Ownership","links":[],"tags":[],"content":"\nOwnership enables Rust to make memory safety guarantees without needing a garbage collector.\n\n\nOwnership is a set of rules that state how a Rust program manages memory.\nGenerally, languages use one of two ways to manage memory -\n\nRun a garbage collector that looks for no longer used memory.\nExplicitly allow and free memory.\n\n\nRust uses a set of ownership rules that the compiler checks.\n\nIf any of the rules are violated, the program won’t compile.\nSince the rules are tested at compile time, the program won’t have a performance hit.\n\n\n\nOwnership Rules\n\nEach value in Rust must have an owner.\nEach value can have only one owner at a time.\nWhen the owner goes out of scope, the value is dropped.\n\nMemory Allocation\nFor allocating dynamic objects like vectors and strings at runtime, we need to do the following -\n\nMemory must be requested from the memory monitor at runtime.\nMemory needs to be returned to the memory allocator when the object is no longer needed.\n\nTraditionally, languages have dealt with this in one of two ways -\n\nUse a garbage collector - it makes the program slower.\nPlacing the onus to return memory on the programmer is error-prone; the programmer can waste memory, cause either use-after-frees or double-frees.\n\nRust deals with this by returning memory when an object goes out of scope. It does so by calling the drop function.\nMove Semantics\nGenerally, for objects allocated on the heap, the stack stores the corresponding pointer to memory.\nMost languages employ a shallow copy when assigning one object to another. In other words, only the contents on the stack get assigned to the new object, thus, the program has two objects pointing to the same address in memory. If the programmer frees both objects, a double free occurs, possibly causing memory corruption and security vulnerabilities.\nRust instead of using a shallow copy, uses moves by default. The move invalidates the older object when it is assigned to a newer one. This way, the program has only one object pointing to a particular point in memory, avoiding double frees.\nlet s1 : String::from(&quot;Hello&quot;);\n \nlet s2 = s1;\n \n// The string s2 is valid here, and hello is printed.\nprintln!(&quot;{}&quot;, s2);\n \n// The string s1 is not valid here.\n// Rust invalidated s1 when it moved its contents to s2.\nprintln!(&quot;{}&quot;, s1);\n\n\n                  \n                  Rust Deep Copy \n                  \n                \nRust never deep copies any objects by default. Thus, any automatic copying can be considered to be inexpensive in terms of runtime performance. The programmer needs to explicitly request a deep copy by using the copy method.\n"},"PARA":{"title":"PARA","links":[],"tags":[],"content":"Projects\n\nShort-term efforts that you are working on now.\nThey have a beginning and an end.\n\nAreas\n\nLong-term responsibilities/areas.\nWhile there is no goal to reach, a standard to be maintained.\n\nResources\n\nTopics that may be useful in the future.\nInstead of using a dedicated folder, I prefer tags.\nI plan on storing tagged information in my daily notes.\nAny of these that are converted into full notes will be in the Inbox.\n\nArchives\n\nInactive items from the other categories.\nEssentially contains content no longer relevant.\nThis helps remove clutter from your workspace.\n\n"},"Poverty-of-Attention":{"title":"Poverty of Attention","links":["Poverty-of-Attention","Building-a-Second-Brain"],"tags":[],"content":"Self Link: Poverty of Attention\n\nInformation is a fundamental building block of everything we do.\nAccording to the NYT, the average person consumes 34 GB of data daily.\n\n\nWhat information consumes is rather obvious: it consumes the attention of its recipients. Hence, a wealth of information creates a poverty of attention…\n\nBuilding a Second Brain says that we have 5 5-day work week. But spend one of those days on average looking for misplaced information. This is very familiar to my first two months of full-time at Google, where I was inundated with a lot of new information, which I could not get my head around. I took notes in a book and could not understand how something was linked to something else. I was very lost."},"Productivity":{"title":"Productivity","links":["Building-a-Second-Brain","Atomic-Habits","Note-Taking"],"tags":[],"content":"\nBuilding a Second Brain\nAtomic Habits\nNote Taking\n"},"Programming-in-C++":{"title":"Programming in C++","links":["Programming-in-C++","Static-Typing-in-C++","Classes","Object-Memory-Allocation","Templates","Pointers-and-Dynamic-Memory","Hashing","Smart-Pointers"],"tags":[],"content":"Self Link: Programming in C++\nThis note contains the various C++ concepts I have learned over the years through my projects and my time at Google and Samsung. The notes on this page come from the perspective of someone who has been coding in C++ for over 5 years, and hence, some of the basics might be glossed over. These notes would serve as a great refresher for someone who is getting back into the language.\nA list of topics to explore further -\n\nStatic Typing in C++\nClasses\nObject Memory Allocation\nTemplates\nPointers and Dynamic Memory\nHashing\nSmart Pointers\n"},"Programming-in-Rust":{"title":"Programming in Rust","links":["Programming-in-Rust","Cargo","First-Rust-Program","Common-Programming-Concepts","Ownership"],"tags":[],"content":"Self Link: Programming in Rust\nThese notes contain the various Rust concepts I picked up when reading the book, The Rust Programming Language by Steve Klabnik and Carol Nichols. These notes were taken from the perspective of someone who has been programming for over 10 years. So they might skip some basic concepts that are common amongst programming languages.\nRust provides a variety of advantages over legacy programming languages -\n\nRust provides speed and stability -\n\nC/C++ lack stability.\nPython lacks speed.\n\n\nRust offers compile-time memory safety -\n\nNo un-initialized variables.\nNo double-frees or use-after-frees.\nNo NULL pointers.\nNo forgotten locked mutexes or data races.\nNo iterator invalidation.\n\n\nRust has no undefined runtime behavior -\n\nInteger overflow is defined.\nArray access is bounds-checked.\n\n\n\nList of topics to further explore -\n\nCargo\nFirst Rust Program\nCommon Programming Concepts\nOwnership\n"},"Progress-Requires-Patience":{"title":"Progress Requires Patience","links":["Progress-Requires-Patience"],"tags":[],"content":"Self Link: Progress Requires Patience\n\nValley of Disappointment - Expected linear improvement not achieved early on.\n\nPowerful outcomes are delayed in compounding phenomena.\n\n\nPlateau of Latent Potential - Point at which habits show dramatic effect.\nNames aside, keep going at a habit for a long period.\n\n\nComplaining about not achieving success despite working hard is like complaining about an ice cube not melting when you heated it from twenty-five to thirty-one degrees. Your work was not wasted; it is just being stored. All actions happen at thirty-two degrees.\n\n"},"Project-Manage-your-Career":{"title":"Manage Your Career like a Project","links":["Note-Taking"],"tags":[],"content":"These are my notes on attending a talk given by a Google career coach on how to treat your career like a project.\nInitiate\n\nDefine the scope of what you are trying to achieve.\nIt is generally guided by motivation.\nAlso, define the success criteria.\n\nCreate a Next Move Objective\n\nThe objective should be -\n\nSpecific\nMeasurable\nActionable\nRelevant\nTime-bound.\n\n\nBreak down all these objectives into bite-sized chunks.\n\nExecute\n\nHave a well-managed calendar.\nHave a robust Note Taking system in place.\nGrow your network.\n"},"Publishing-Your-Vault-Online":{"title":"Publishing Your Vault Online","links":["GitHub-Publisher","Quartz"],"tags":[],"content":"Main Tools\n\nQuartz - Generates static websites from markdown.\n\nVery simple if you want everything in your vault published (uses a GitHub action).\nI have private content - cannot use the default GitHub action!\n\n\nObsidian Export - Allows selective inclusion/exclusion of obsidian files.\n\nConverts obsidian into standard-compliant markdown.\n\n\nObsidian Hugo - Used by the Quartz GitHub action.\n\nCan be precompiled before uploading to GitHub.\n\n\nGitHub Pages - Static webpage hosting offered by GitHub.\n\nSteps to Obsidian Publish Vault (on a MAC)\nInstall Node and npm on your machine. This is required for running Quartz.\n# Install node and mpm\nbrew update\nbrew install node\n \n# Query version\nnode -v\nnpm -v\n \n# Install nodemon -&gt; needed to check for changes to the Obsidian vault.\nnpm install -g nodemon\nnodemon -v\nClone quartz locally. The contents/ folder inside Quartz is the data that is going to be publicly displayed. You will want to sync the new quartz directory with GitHub. Follow these steps.\nIn the quartz directory, add the compile scripts. The compile script first empties the contents of quartz. It then uses the obsidian exporter to only export allowed files. Add a .export-ignore file to the root Obsidian vault. This is similar to .gitignore. Used for selectively excluding files from being exported. Note that this file cannot be created in Obsidian as it starts with a .. You will have to create/edit it in an IDE.\nBuild and preview the website before pushing to GitHub. Can be done by running - npx quartz build --serve. Pushing to GitHub can be done using npx quartz sync.\n\n\n                  \n                  Quartz does not natively support DataView and Excalidraw. Refer GitHub Publisher.\n                  \n                \n\nFor more advanced modifications, refer Quartz.\nReferences\n\nQuartz Website\nBrandon Boswell’s video on setting up Quartz\nNicole’s video on setting up Quartz\n"},"Quartz":{"title":"Quartz","links":["Quartz"],"tags":[],"content":"Self Link: Quartz\n\nQuartz is a static site generator targeted at Obsidian vaults.\nQuartz configuration can be changed by updating quartz.config.ts.\nQuartz layout can be modified by updating quartz.layout.ts.\n\nReferences\n\nSource - quartz.jzhao.xyz\n"},"Reading-List":{"title":"Reading List","links":["Google-Platforms-Rant","Master-Small-Talk"],"tags":[],"content":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFileCreatedGoogle Platforms Rant-Master Small Talk-"},"Reliability":{"title":"Reliability","links":[],"tags":[],"content":"\nReliability is the ability of a system to work as expected even when something goes wrong.\n\nFaults vs Failures\n\nThings that can go wrong are called faults. Systems that are resilient to faults are fault-tolerant.\n\n\nA fault is defined as a component of a system deviating from the normal behavior.\nA failure is when the entire system does not behave as the user expects.\nFault-tolerant systems prevent cascading faults from leading to a full system failure.\n\nFault Injection\n\nThe technique of creating deliberate faults is called fault-injection.\nThis keeps systems continuously tested for fault-tolerance.\nA good example of this in practice is the Netflix Chaos Monkey.\n\nHardware Faults\nIncludes hard disk crashes, RAM corruption, power outages, etc. The first response to hardware faults is to add redundancy, such that when one instance dies, the redundant component takes its place and the broken one can be replaced.\n\nIt is highly unlikely that a large number of hardware components fail at the same time.\n\nSoftware Faults\nSoftware faults occur when the system makes some kind of assumption about the environment it runs in, which might not be true. These types of bugs stay dormant for a long time before some unusual set of conditions triggers them. Software faults tend to cause cascading errors in other dependent components, potentially leading to system failure.\nHuman Error\n\nConfiguration errors by operators are the leading cause of internet service outages.\n\nThe following steps can be taken to keep systems reliable despite human errors -\n\nDesign APIs and abstractions that minimize the chance of errors.\nProvide sandbox environments where people can experiment safely.\nTest thoroughly - unit tests, integration tests, and E2E tests.\nAllow quick and easy recovery from errors -\n\nFast rollback of configuration changes.\nStaged rollout of new code to catch bugs early.\n\n\nSet up detailed monitoring and alerting.\n"},"S-and-P-500":{"title":"S&P 500","links":["S-and-P-500","Market-Capitalization","Exchange-Traded-Funds"],"tags":[],"content":"Self Link: S&amp;P 500\n\nThe S&amp;P 500 Index measures the stock prices of 500 of the largest, publicly traded companies in the US.\nIt’s weighted using each company’s value by Market Capitalization.\nOnly profitable companies are in the S&amp;P 500.\nThe S&amp;P 500 is used as a proxy for how the US market is performing.\nMultiple funds and Exchange Traded Funds that track the S&amp;P 500.\nIt is not possible to invest directly in a market index.\n\nInvest in an ETF tracking the index.\n\n\n\nReferences\n\nS&amp;P 500\n"},"SCC":{"title":"SCC","links":["SCC"],"tags":[],"content":"Self Link: SCC\n\nSloc Cloc and Code (SCC) is a LOC counter.\nSource: github.com/boyter/scc.\nInstallation - brew install scc.\nUsage - scc [flags] [files or directories].\n"},"Scalability":{"title":"Scalability","links":[],"tags":[],"content":"\nScalability is the ability of a system to cope with increased loads.\n\nThe load on a system is defined by various load parameters based on the architecture of the system. An example of a load parameter would be the number of requests per second for an RPC server. The performance of the system is evaluated as the load parameter changes along with the change in resources required to serve that load.\nPerformance Metrics\nGenerally, average performance (the mean) is not a very good indicator, as it does not tell us anything about the number of users/services experiencing performance degradation. Percentiles and median measures are widely used, as they give us clear indicators of the percentage of users/services experiencing regressions. Most services have their Service Level Agreements (SLAs) and Service Level Objectives (SLOs) described in terms of percentiles.\nThere are two approaches to make a system scalable -\n\nVertical Scaling - using more powerful machines\nHorizontal Scaling - Distributing load across multiple machines.\nUsually, good architectures are a combination of vertical and horizontal scaling.\n"},"Second-Brain":{"title":"Second Brain","links":["Common-Place-Book"],"tags":[],"content":"Overview\n\nThe Second Brain is a private knowledge collection system.\nIt is a digital Common Place Book.\nIt can be searched, organized, stored, and synced across various devices.\n\nUse Cases\n\nAmbiguity in what information is to be retained.\nNo idea on how/when notes would be used.\nIncorporating feedback on your notes.\n\n\nEngineering aims to build products and services to make the lives of its users more convenient. Second Brain is the concept of leveraging modern technology to improve our cognitive abilities and enhance critical and creative thinking.\n\nPurpose\nThe singular most important job of a second brain is to unearth associations between ideas/concepts that at first glance look unrelated. This is facilitated by storing diverse materials and annotations in a singular location."},"Software-2.0":{"title":"Software 2.0","links":[],"tags":[],"content":"\nNeural networks are not just another classifier; they represent the beginning of a fundamental shift in how we develop software. They are Software 2.0.\n\nApproach to Software 2.0\n\nSpecify a goal for the behavior of a desirable program.\nWrite skeleton code that identifies a subset of program space to search (neural nets).\nFor neural networks, we restrict the search to a continuous subset of the program space.\n\nThe search process is carried out with backpropagation and stochastic gradient descent.\n\n\n\nComponents of Software 2.0\n\nA dataset that defines desirable behavior.\nNeural network architecture without the weights.\n\nIn most applications, the NN architecture is standardized, making work on data sets critical.\nExamples\n\nVisual Recognition\nSpeech Recognition\nSpeech Synthesis\nMachine Translation\n\nBenefits\n\nComputational Homogeneity - Compared to traditional software, software 2.0 has only two major operations: matrix multiplication and ReLU.\nEasier to integrate into hardware - This is a by-product of a simple instruction set.\nConstant running time and memory use.\nIt is highly portable and agile.\n\nLimitations\n\nIt’s hard to tell how these networks work.\nThey can have silent biases that are very hard to identify and remove.\n\nReferences\n\nSoftware 2.0\n"},"Stack-and-Heap":{"title":"Stack and Heap","links":[],"tags":[],"content":"Both the stack and heap are parts of memory that are available to the code to use at runtime.\nStack\n\nThe stack uses the LIFO paradigm.\nAll data in the stack is of a known fixed length.\nMemory management on the stack is faster than using the Heap.\n\nHeap\n\nWhen data is added to the heap, the program needs to request some amount of space.\nOne receiving a request, the memory monitor finds a chunk large enough and returns a pointer to the block.\nThe pointer to this data block is generally stored on the stack.\n"},"Static-Typing-in-C++":{"title":"Static Typing in C++","links":["Fundamental-Types","Derived-Types"],"tags":[],"content":"\nEvery variable needs to have a type associated with it.\nTypes allow the compiler to -\n\nKnow how much memory a variable needs.\nTypes of values that can be stored in the variable.\nOperations that can be performed on a variable.\n\n\n\nC++ has two broad classes of typing -\n\nFundamental Types - these are built into the compiler.\nDerived Types - also called compound types.\n\n"},"Storyworthy":{"title":"Storyworthy","links":["Storyworthy"],"tags":["BookNote"],"content":"Self Link: Storyworthy"},"Systems-Over-Goals":{"title":"Systems Over Goals","links":["Systems-Over-Goals","Building-a-Second-Brain"],"tags":[],"content":"Self Link: Systems Over Goals\n\nSuccess depends on your systems, not goals.\n\nBoth successful and unsuccessful people have the same goals.\nThe difference is the systems/processes employed.\n\n\nGoals are temporary changes. Systems lead to long-term repeatable changes.\nFocusing on goals leads to abandoning the process after the goal is achieved.\n\nThe purpose of goals is to win the game.\nThe purpose of a system is to continue playing.\n\n\nYou do not rise to the level of your goals, but fall to the level of your systems.\n\n\nIt is your commitment to the process that will determine your progress.\n\nBuilding a Second Brain talks about how maintaining a system to take notes and manage knowledge can help produce more creative outputs. It also says creativity is a product of the creative process."},"The-Artist's-Way":{"title":"The Artist's Way","links":[],"tags":["BookNote"],"content":""},"The-Body":{"title":"The Body","links":[],"tags":["BookNote"],"content":"\nSuicide by lifestyle takes ages.\n"},"The-Bullet-Journal-Method":{"title":"The Bullet Journal Method","links":[],"tags":["BookNote"],"content":""},"The-Elements-of-Investing":{"title":"The Elements of Investing","links":["Exchange-Traded-Funds"],"tags":["BookNote"],"content":"\nThe amount of capital you start with is not as important as saving regularly and starting early.\n\n\n\n                  \n                  Danger\n                  \n                \nDo not have credit card debt!\n\nSave\n\nThe quickest way to affluence is to reduce your expenses.\nSaving increases your freedom both now and in the future.\nStart saving early and regularly- use the power of compounding.\nTime is a lot more important than timing, so start early.\nDon’t outlive the money you saved for retirement.\nTax minimization is an essential tool in building savings.\n\n\n\n                  \n                  The Rule of 72 \n                  \n                \nThe number of years to double the investment times percentage annual yield equals 72.\n\nIndex\n\nDevelop a simple financial plan and stick to it.\nIndexing has outperformed all but a handful of securities.\nRemember that nobody knows more than the market!\nInvesting in index funds simplifies investing.\nIndex funds are tax-efficient - gains are over time, and hence lesser taxes over time.\nIndex funds are predictable (you will do average in the long term.\nLook into total market funds.\nRefer Exchange Traded Funds.\n\nDiversify\n\nA cardinal rule of investing: Diversify.\nBuying ETFs or index funds is an automatic way to diversify.\nDiversify across securities, asset classes, markets, and across time.\nThe price of a bond is inversely proportional to the interest rate.\nDiversification across time refers to not making all investments at once.\nDollar cost averaging - regular periodic investments over time.\nA general portfolio consists of stocks and bonds.\nAs you age, you end up having more bonds than stocks.\nAlways rebalance your portfolio at the start of your year!\nRebalancing might not increase returns, but it will reduce risks.\n\nCommon Blunders\n\nThe secret to financial success is patience, persistence, and minimizing mistakes.\nYou can save time, anxiety, and money by ignoring all market forecasts.\nThe best investing advice anyone can give you is to buy and hold an index fund regularly.\nIf you have to sell, sell your losers as they give you tax write-offs.\nMinimize your investment cost.\nAs an individual investor, avoid buying individual stocks - stick to ETFs.\nIf you do consult financial advisors, stick to ones who are fee-only, avoid people who take commissions.\n"},"The-Little-Book-of-Common-Sense-Investing":{"title":"The Little Book of Common Sense Investing","links":[],"tags":["BookNote"],"content":"\nSuccessful investing is ALL about COMMON SENSE.\n\n\nA winning strategy is to own all of the nation’s businesses at a meager cost.\nThis will capture the entire market’s dividends and growth.\nThe best way to implement this is through index funds.\n\n\n\n                  \n                  Danger\n                  \n                \nBefore deducting the costs of investing, beating the market is a zero-sum game. After deducting the costs of investing, beating the stock market is a loser’s game.\n\n\nFor investors as a whole, returns decrease as motion increases!\n\n\nOccam’s Razor - When there are multiple solutions to a problem, choose the simplest one.\nThe simplest way to win in the stock market is to own everything!\nThe simplest way to hold every stock is to have a total stock market portfolio.\n\nBest achieved through an index fund.\n\n\n\nInvestment Costs\n\nInvestors as a group get what they don’t pay for. So if you don’t pay, you get everything.\nThe costs of financial intermediation are very high. Make sure your costs are meager.\nOver the long term, compounding returns are overwhelmed by compounding costs.\nIndex funds are tax-efficient. They allow investors to defer capital gains until they sell.\n\nDelaying selling allows turnover to remain low, leading to lower taxes.\n\n\nInvestment return = Return - Tax - Investment Costs - Inflation ⇒ Minimize your costs.\nIn a future with low returns, low-cost, tax-efficient funds remain good investment vehicles.\n\nThe lower the returns, the worse the effect of investment costs on real returns.\n\n\nSelect index funds without sales loads (commissions).\nLow-cost index funds outperform the average actively managed funds in less efficient markets.\n\n\nThe winning formula for investing success is owning the entire stock market through an index fund and then doing nothing. Just stay the course.\n\n\n\n                  \n                  Warren Buffett&#039;s 4 E&#039;s of Investment \n                  \n                \nThe greatest Enemies of the Equity investor are Expenses and Emotions.\n\nFixed-Income Securities\nFixed-income securities include bonds, money market funds, and HYSAs. The rates produced by these securities are directly related to the interest rates.\nBonds\n\nLong-dated bonds are more volatile but provide higher returns than short-dated bonds.\nBonds represent debt; bonds default if the interest for the underlying securities isn’t paid.\nThere are three major classes of bonds -\n\nTaxable corporate and government bonds.\nTax-exempt municipal bonds.\nUS Treasury Bills.\n\n\nAlways avoid bond funds with sales loads.\n\nMoney Market Funds\n\nMoney Market Funds are short-term bond funds with uniform high credit quality.\nWith short maturities, high credit quality, and diversified portfolios, money market funds become commodities.\nThey are not FDIC-insured like HYSAs.\n"},"The-Psychology-of-Money":{"title":"The Psychology of Money","links":[],"tags":["BookNote"],"content":"Morgan Housel’s The Psychology of Money uses real-life anecdotes to describe how people’s financial decisions are influenced by emotion rather than logic. My notes relate to the concepts behind the anecdotes.\n\nDoing well with money has little to do with how smart you are and a lot to do with your behavior.\n\nThe story of Ronald Read, the gas station attendant turned millionaire philanthropist, stresses that financial well-being has more to do with how you behave than what you know.\n\n\n                  \n                  Voltaire&#039;s Observation \n                  \n                \nHistory never repeats itself; man always does.\n\nExperience Matters\nIn theory, investment decisions should be based on the individual’s goals and the characteristics of available options. However, this is different from what people do. People make investment decisions based on their past experiences.\n\nIndividual investors’ willingness to bear risk depends on personal history.\n\n\nMost topics don’t have black-and-white answers.\nDifferent experiences can lead to vastly different views on a topic.\n\nRole of Luck\nLuck and risk are doppelgängers. Both remind us of external forces affecting all decisions. They both exist because the world is too complex to let 100% of one’s actions dictate 100% of one’s outcomes.\nLearning from the investment strategies of others can be challenging, as it can be difficult to distinguish which outcome is due to luck and which is due to skill. Thus, it is prudent to focus less on individual case studies and more on generalized broad patterns.\n\nNot all success is due to hard work. Not all failures are because of laziness.\n\nSuccess is a lousy teacher. When things are going well, remember that the luck that pushed you forward can also shoot you in the face.\nThe Beauty of Having Enough\nThere are many invaluable things in the world — happiness, peace of mind, friends, family, reputation, freedom, and independence. No amount of money can or should replace any of these. Thus, taking excess risk to harm any of these makes no sense.\n\nHappiness is just results minus expectations.\n\n\nThe most challenging financial skill is saying you have enough.\nAccept you might have enough, even if it’s less than those around you.\nSaying you had enough is not the same as being conservative.\nMany things are not worth risking, no matter the gain.\n\n\n\n                  \n                  Warren Buffet \n                  \n                \nThere is no reason to risk what you have and need for what you don’t have and don’t need.\n\nWhat is Wealth?\n\nWealth is what you don’t see. Wealth is the nice cars not purchased, the diamonds not bought, the watches not worn, the clothes forgone, and the first-class upgrade declined. Wealth is financial assets that haven’t yet been converted into the stuff you see.\n\nWanting to be a millionaire is different from spending a million dollars. The only way to accumulate wealth is not to spend the money you have. Wealth is hidden; it’s income that is not spent. Wealth’s value lies in providing future options, flexibility, and growth.\n\nBuilding wealth has little to do with income or returns. It is more dependent on your savings rate.\nThe value of wealth is relative to what you need. The less you need, the more you have.\nSaving for saving’s sake is a powerful tool over time. Saving is a hedge against difficult times.\n\nA common denominator of happiness is people’s desire for more control of their lives. The ability to do what you want, when you want, with who you want, for as long as you want, is priceless. Money’s greatest intrinsic value is its ability to give you control of your time.\nGenerating vs. Maintaining Wealth\nThere are multiple ways to generate wealth, but only one way to stay wealthy: frugality plus paranoia. Getting and keeping money are separate skill sets. Generating wealth involves learning new skills and taking risks, while keeping money involves saving, being patient, and reducing risks.\nThe ability to stay for a long time makes the most significant difference. Time is the secret and should be the cornerstone of your strategy regarding money, investments, career, or business.\n\nBe financially unbreakable. This allows you to stick around for a long time, maximizing returns.\nPlan for the plan not going according to plan.\nMake sure your financial plan is as broad/general/simple as possible.\nHave short-term paranoia to exploit long-term optimism.\n\n\nCompounding does not rely on earning significant returns. Average returns sustained uninterrupted for a prolonged period will always win.\n\n\n\n                  \n                  Napoleon on Geniuses \n                  \n                \nA person who can do the average thing when all those around them are going crazy.\n\nAvoiding Ruin\n\nRational optimism tends to hide potential risks of ruin.\nIndividuals should not take any risks that can wipe them out completely.\nTo help protect against optimism bias, investors should -\n\nHave safety margins.\nAvoid single points of failure.\n\n\n\n\n\n                  \n                  Benjamin Graham \n                  \n                \nThe purpose of the margin of safety is to render the forecast unnecessary.\n\nAs individuals age, their lives transform, often encountering unexpected situations such as medical crises, embarking on new career paths, or experiencing income loss. In all these circumstances, resilience is essential. To prevent financial disaster during these times, individuals must:\n\nPractice moderation to avert future regret.\nAccept the reality of change and avoid sunk costs.\n\nBubbles\nIt is difficult to explain why financial bubbles occur. One reason is that investors often take innocent cues from other investors who have different goals. Bubbles cause damage when long-term investors start taking cues from short-term traders.\n\nBubbles form when the momentum of short-term returns attracts enough money that the makeup of investors shifts from mostly long-term to primarily short-term.\n\nBubbles are a self-feeding process. Bubbles aren’t so much about valuations rising. That’s just a symptom of something else: time horizons shrinking as more short-term traders enter the playing field. Money chases returns to the greatest extent possible."},"The-Three-Fund-Portfolio":{"title":"The Three Fund Portfolio","links":["Certified-Deposits"],"tags":[],"content":"\n\n                  \n                  Note\n                  \n                \nThis is specific to the US investor.\n\nThe three-fund portfolio is popular amongst Bogleheads who are interested in a simple, lazy investment strategy. It generally consists of the two basic asset classes -\n\nStocks\nBonds\n\nGenerally, low-cost funds that represent the entire market are chosen for the portfolio. An example  ETF portfolio (similar index funds can be used as well) is as follows -\n\nVanguard Total Stock Market ETF (VTI)\nVanguard Total International Stock Market Index Fund (VXUS)\nVanguard Total Bond Market ETF (BND)\n\nA potential replacement to the bond portion of the portfolio could be a high-yield savings account or Certified Deposits.\nThe more interesting question would be the percentage of allocations in the three funds. The percentages would depend on the individual and their unique circumstances.\nAdvantages\n\nSimple\nDiversification\nVery low cost\nTax efficient\nNo overlap\nEasy to rebalance\nNever underperforms the market\n\nReferences\n\nThe Three Fund Portfolio\n"},"Thinking-Traps":{"title":"Thinking Traps","links":["Externalize-Your-Thoughts"],"tags":[],"content":"\nWhat we think about impacts our emotions.\n\nHence, when emotional, our thoughts can be inaccurate.\n\n\n\n\nThinking traps are false or inaccurate thoughts that we think are true, that make us upset.\n\nCommon thinking traps -\n\nCatastrophizing - Thinking a situation will be worse than it is.\nMind Reading - Thinking that other people have negative thoughts about you when there is no evidence.\nDiscounting the positives - Don’t give positives enough importance.\n\nFor more thinking traps, refer - content.lyrahealth.com/coaching/thinking-traps/\n\nFrom an evolutionary point of view, thinking about worst-case scenarios can help you prepare and avoid disasters.\n\n\n\n                  \n                  Warning\n                  \n                \nOur Mind can be WRONG!!! Thoughts are not FACTS!!!\n\nChallenging Traps\n\nIdentify the situation - What? Why?\n\nArticulate what and why you are feeling/thinking.\n\n\nIdentify the thinking trap.\nWrite points for and against the thought.\nGenerate an alternative response.\n\nGetting Distance From Traps\n\nNot always necessary to challenge thinking traps.\nDistancing ourselves from them opens our minds to alternative possibilities.\n\nThis can be achieved by acknowledging our thoughts.\n\n\nAnother way to do it is to Externalize Your Thoughts.\n"},"Threads":{"title":"RPCs and Threads","links":[],"tags":[],"content":"Threads enable the following -\n\nConcurrency\nMulticore Parallelism\nConvenience (periodic background tasks)\n\nRPCs and Threads\n\nWe generally have an RPC service that listens for incoming requests.\nFor each request, the service will spawn a separate thread to construct a response.\nOn the client side, we can separate threads sending RPC requests to different RPC services.\n\nAsynchronous Programming\n\nAlso called event-driven programming.\nWe have a task that waits for a particular event (eg, an interrupt).\nThis is an alternative to concurrent programming.\nLower overhead than concurrent programming.\n\nThreads vs Processes\n\nA process is a single program that runs with a single address space.\nA process can consist of multiple threads, where the process address space is divided up between the threads.\n\nThread Challenges\n\nShared data handling\nThread coordination (thread communication - notifications)\nDeadlocks (multiple threads waiting on each other)\n\nOpen Questions\n\nWhen an operating system context switches, does it operate on threads or processes? If it operates on processes, how does it decide which thread to run?\n"},"Three-Layers-of-Behavior-Change":{"title":"Three Layers of Behavior Change","links":[],"tags":[],"content":"The Three Layers\n\nChange in Outcomes - What you get.\nChange in Process - What you do.\nChange in Identity - What you believe.\n\nTwo Types of Change\n\nOutcome-Based - Focus on what you want to achieve. (Most Common)\nIdentity Based - Focus on who you want to be.\n\n\nBehavior that is incongruent with the self will not last.\n\nIn order to make lasting changes to habits, we need to make lasting changes to beliefs. For example, take the way you looked. In India, you were not tidy in appearance, you did not dress neatly, and did not maintain your hair. But you started taking care of your outward appearance and understood that you looked so much better. It has now become second nature to take care of yourself. The habit became part of who you are, in other words, an identity change.\n\nThe deeper a thought is tied to your identity, more the inertia to change.\nProgress requires unlearning and editing your beliefs.\n"},"When-to-use-Machine-Learning":{"title":"When to use Machine Learning?","links":[],"tags":[],"content":"\nMachine learning is an approach to learn complex patterns from existing data and use these patterns to make predictions on unseen data.\n\n\nSystems should have the capacity to learn.\nThere are complex patterns to learn.\nData is either available or can be collected.\nThe problem needs predictions.\nUnseen data shares patterns with training data.\nProblems are repetitive.\nWrong predictions have cheap consequences.\nThe solutions are at scale.\nConstantly changing patterns.\n\n\nDon’t dismiss new technology for not being as cost-effective as existing solutions.\n\nTechnologies can become better with more investment.\nIf you wait for a technology to mature before adopting, you will be outdated.\n\n\n"},"You-And-Your-Research":{"title":"You And Your Research","links":["You-And-Your-Research","Building-a-Second-Brain","Atomic-Habits"],"tags":[],"content":"Self Link: You And Your Research\nThis is a talk given by Professor Richard W. Hamming, where he preaches 2 things -\n\nIt is worth trying to accomplish the goals you set for yourself.\nIt is worth setting yourself high goals.\n\n\nThe major objection cited by people against striving to do great things is the belief that it is all a matter of luck. I have repeatedly cited Pasteur’s remark, “Luck favors the prepared mind.” It both admits there is an element of luck and yet claims to a great extent it is up to you. You prepare yourself to succeed or not, as you choose, from moment to moment, by the way you live your life.\n\n\nJust like Building a Second Brain and Atomic Habits highlight, creative acts are lots of hard work applied over long periods.\nA very important quality to have is the belief that you can do important things.\nConfidence in yourself is essential. Others call it Courage.\nIntellectual Interest compounds.\n\n\n\n                  \n                  Note\n                  \n                \nWhat you consider to be good working conditions may not be good or you!\n\n\nProfessor Hamming recommends taking time to think about the larger questions.\n\nThis allows you to escape the details.\nEssential for any future leader/businessman.\n\n\nTolerating ambiguity - probably the most important thing he says.\nTo sell a new idea, you need to master three things -\n\nGiving Formal Presentations.\nProducing Written Reports.\nMaster Informal Presentations.\n\n\n\nReferences\n\nYou And Your Research\n"},"Zettelkasten":{"title":"Zettelkasten","links":["Second-Brain"],"tags":[],"content":"Overview\n\nIt originates from a system of writing on index cards.\nThese cards would be grouped into various boxes meant for a specific purpose.\nEach of these cards would be linked to other cards through an index number.\n\nTypes of Notes\n\nZettelkasten has 3 different types of notes -\n\nFleeting Note - Raw data, not distilled (very similar to the daily note).\nLiterature Note - A traditional note, with a lot of data about a specific topic.\nPermanent Note - Very distilled, summarizes a single idea in a few sentences.\n\n\n\nAlso refer Second Brain idea of note-taking. This is the method I follow.\nReferences\n\nwww.youtube.com/watch\n"},"index":{"title":"Papyrus","links":["Computer-Science","Finance","Productivity","Career","Library"],"tags":[],"content":"\nWelcome to Papyrus!\nPapyrus is my collection of notes on a variety of topics like distributed computing and finance. This began as a personal experiment and has since evolved into an elaborate system working tirelessly in the background to help me not forget things.\n\nAbout Me\nHi there! I’m Arun, a Software Engineer at Google in Sunnyvale, where I design low-level networking daemons that keep our AI infrastructure running.  With over 3 years of experience building distributed systems and cloud infrastructure, I have grown fond of wrestling with packet drops, race conditions, and segfaults. Before Google, I earned my Master’s in Computer Science from the University of Wisconsin–Madison and worked at Samsung Research in India.\nOutside of work, you’ll find me deep in a sci-fi or fantasy epic (currently reading Abaddon’s Gate from The Expanse), cycling when the California sun cooperates, or losing track of time in an open-world RPG. I also possess the rare and questionable talent of sleeping 17 hours straight.\nThanks for stopping by - feel free to explore and connect!\nMap Of Content\nMy collection of notes is constantly evolving. I have listed a few interesting starting points for you to explore. Feel free to use the search bar to find notes not listed here.\n\nComputer Science\nFinance\nProductivity\nCareer\nLibrary\n"}}